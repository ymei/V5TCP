/** \mainpage
@brief
Genesys Virtex-5 1-gigabit ethernet (TCP) control board
\verbatim
--------------------------------------------------------------------------------
Run the entire synthesis / build on command line:
Create a top-level directory, in parallel to src and ipcore_dir, cd
into it, then type:
/opt/Xilinx/14.7/ISE_DS/ISE/bin/lin64/xtclsh ../src/V5TCP.tcl rebuild_project
IP cores can be regenerated by
coregen -b xxx.xco
--------------------------------------------------------------------------------
Generating a PROM file (MCS):
In iMPACT, select BPI Flash Configure Single FPGA
Virtex5 32M, MCS, x16, no extra data
BPI PROM, 28F256P30, 16 bit
Erase before programming

Mode switch: M2 M1 M0
0 1 1 BPID
0 1 0 BPIU <- use this one
1 0 1 JTAG
--------------------------------------------------------------------------------
When using LVDS (IOSTANDARD = LVDS_25), the Vcco of the bank must be
2.5V (3.3V not allowed).  This is particularly important for VHDCI ports.
--------------------------------------------------------------------------------
MIG:
    Virtex-5 xc5vlx50t-ff1136 speed grade -2, do not select pin compatible
    DDR2 SDRAM, 3750ps (266.67MHz), SODIMMs, MT4HTF3264HY-667, Data Width 64,
    Enable Data Mask, Burst Length 8(011), CAS Latency 4(100), Fullstrength(0),
    RTT 75ohms(01), AL 0(000), Use PLL, No debug signals, System Clock single-ended,
    uncheck Limit to 2 Bytes per Bank, DCI for DQ/DQS (yes), DCI for
    Address/Control (no), Class for Address and Control (Class II),
    load ddr2_mig.ucf

    For this SODIMM unit (MT4HTF3264HY-667), it can be set to 3000ps (333MHz)
    and CAS Latency = 5.  Actual unit came with Genesys contains Samsung K4T51163QJ-BCE7

    Replace the original unit with M470T6554CZ3-CD5 (512MB, 32Meg x 16
    DDR2-533, CAS L = 4).  It seems to work although the MIG is configured
    for MT4HTF3264HY-667.  Test shows the usable capacity is only 256MB.

  Modify the following files, change Y34 to K29 in Bank 15:
    ipcore_dir/mig/example_design/datasheet.txt: ddr2_we# -> Y34
    ipcore_dir/mig/example_design/mig.prj: <Pin SignalName="ddr2_we#" PINNumber="Y34" SignalGroup="Address" Bank="13" />
    ipcore_dir/mig/example_design/par/mig.ucf:NET "ddr2_we_n" LOC = "Y34" ;          #Bank 13
    ipcore_dir/mig/user_design/datasheet.txt: ddr2_we# -> Y34
    ipcore_dir/mig/user_design/mig.prj: <Pin SignalName="ddr2_we#" PINNumber="Y34" SignalGroup="Address" Bank="13" />
    ipcore_dir/mig/user_design/par/mig.ucf:NET "ddr2_we_n"    LOC = "Y34" ;          #Bank 13
  Then regenerate the IP Core
    Copy the contents of ipcore_dir/mig/user_design/par/mig.ucf into own design.
      ipcore_dir/mig/user_design/rtl/mig.vhd is the one to be instantiated.
      other files in there can be modified to change the behavior of the MIG core.
    Moved ddr2_infrastructure.vhd from user_design/rtl/ to src/sdram_ddr2/
      and made a backward link.
  Set CLK_PERIOD to 10000 (10ns, matching clk_sys) when instantiating the core
    to allow the core itself to generate clocks correctly.
--------------------------------------------------------------------------------
EMAC TCP:
    Set FULL_DUPLEX_ONLY => true in client_side_fifo_emac0
    When built-in FIFO is used in control_interface (data_fifo : fifo36x512),
    Its size should be no smaller than the FIFO read request size (NBASK)
    in the TCP read program.  Changing the fifo to BRAM type (512 writes)
    eliminated the problem.
\endverbatim
*/
